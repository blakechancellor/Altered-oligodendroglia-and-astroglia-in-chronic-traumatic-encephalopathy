#This script is designed to work within an R-project directory that contains the original counts files.
#If an R-project directory is not in use, set a working directory and add the original count files.

#View Seurat vignette.
#https://satijalab.org/seurat/get_started.html


#---------- Initiation ----------


#Load packages.
library(cowplot)
library(reticulate)
library(scater)
library(Seurat)

#Set the python environment.
use_python("C:/.../Python/Python37/python.exe")

#Increase potential export memory usage.
options(future.globals.maxSize = 3000 * 1024^2)

#Define a helpful function.
substrRight <- function(x, n){
  substr(x, nchar(x)-n+1, nchar(x))
}

#Read-in counts.
control.1.1.data <- readSparseCounts("L5618_1.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
control.1.2.data <- readSparseCounts("L5618_2.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
control.1.3.data <- readSparseCounts("L5618_3.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
control.2.1.data <- readSparseCounts("L5864_1.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
control.2.2.data <- readSparseCounts("L5864_2.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
control.2.3.data <- readSparseCounts("L5864_3.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
control.3.1.data <- readSparseCounts("L6020_1.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
control.3.2.data <- readSparseCounts("L6020_2.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
control.3.3.data <- readSparseCounts("L6020_3.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
control.4.1.data <- readSparseCounts("L6085_1.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
control.4.2.data <- readSparseCounts("L6085_2.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
control.4.3.data <- readSparseCounts("L6085_3.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
CTE.1.1.data <- readSparseCounts("K177_1.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
CTE.1.2.data <- readSparseCounts("K177_2.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
CTE.1.3.data <- readSparseCounts("K177_3.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
CTE.2.1.data <- readSparseCounts("K18_1.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
CTE.2.3.data <- readSparseCounts("K18_3.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
CTE.3.2.data <- readSparseCounts("SLI124_2.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
CTE.3.3.data <- readSparseCounts("SLI124_3.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
CTE.4.1.data <- readSparseCounts("SLI131_1.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
CTE.4.2.data <- readSparseCounts("SLI131_2.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
CTE.4.3.data <- readSparseCounts("SLI131_3.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)

#Transpose counts.
control.1.1.data <- t(control.1.1.data)
control.1.2.data <- t(control.1.2.data)
control.1.3.data <- t(control.1.3.data)
control.2.1.data <- t(control.2.1.data)
control.2.2.data <- t(control.2.2.data)
control.2.3.data <- t(control.2.3.data)
control.3.1.data <- t(control.3.1.data)
control.3.2.data <- t(control.3.2.data)
control.3.3.data <- t(control.3.3.data)
control.4.1.data <- t(control.4.1.data)
control.4.2.data <- t(control.4.2.data)
control.4.3.data <- t(control.4.3.data)
CTE.1.1.data <- t(CTE.1.1.data)
CTE.1.2.data <- t(CTE.1.2.data)
CTE.1.3.data <- t(CTE.1.3.data)
CTE.2.1.data <- t(CTE.2.1.data)
CTE.2.3.data <- t(CTE.2.3.data)
CTE.3.2.data <- t(CTE.3.2.data)
CTE.3.3.data <- t(CTE.3.3.data)
CTE.4.1.data <- t(CTE.4.1.data)
CTE.4.2.data <- t(CTE.4.2.data)
CTE.4.3.data <- t(CTE.4.3.data)

#Add condition, biological replicate, and technical replicate identifiers.
colnames(control.1.1.data) <- paste(colnames(control.1.1.data), "-control.1.1", sep="")
colnames(control.1.2.data) <- paste(colnames(control.1.2.data), "-control.1.2", sep="")
colnames(control.1.3.data) <- paste(colnames(control.1.3.data), "-control.1.3", sep="")
colnames(control.2.1.data) <- paste(colnames(control.2.1.data), "-control.2.1", sep="")
colnames(control.2.2.data) <- paste(colnames(control.2.2.data), "-control.2.2", sep="")
colnames(control.2.3.data) <- paste(colnames(control.2.3.data), "-control.2.3", sep="")
colnames(control.3.1.data) <- paste(colnames(control.3.1.data), "-control.3.1", sep="")
colnames(control.3.2.data) <- paste(colnames(control.3.2.data), "-control.3.2", sep="")
colnames(control.3.3.data) <- paste(colnames(control.3.3.data), "-control.3.3", sep="")
colnames(control.4.1.data) <- paste(colnames(control.4.1.data), "-control.4.1", sep="")
colnames(control.4.2.data) <- paste(colnames(control.4.2.data), "-control.4.2", sep="")
colnames(control.4.3.data) <- paste(colnames(control.4.3.data), "-control.4.3", sep="")
colnames(CTE.1.1.data) <- paste(colnames(CTE.1.1.data), "-CTE.1.1", sep="")
colnames(CTE.1.2.data) <- paste(colnames(CTE.1.2.data), "-CTE.1.2", sep="")
colnames(CTE.1.3.data) <- paste(colnames(CTE.1.3.data), "-CTE.1.3", sep="")
colnames(CTE.2.1.data) <- paste(colnames(CTE.2.1.data), "-CTE.2.1", sep="")
colnames(CTE.2.3.data) <- paste(colnames(CTE.2.3.data), "-CTE.2.3", sep="")
colnames(CTE.3.2.data) <- paste(colnames(CTE.3.2.data), "-CTE.3.2", sep="")
colnames(CTE.3.3.data) <- paste(colnames(CTE.3.3.data), "-CTE.3.3", sep="")
colnames(CTE.4.1.data) <- paste(colnames(CTE.4.1.data), "-CTE.4.1", sep="")
colnames(CTE.4.2.data) <- paste(colnames(CTE.4.2.data), "-CTE.4.2", sep="")
colnames(CTE.4.3.data) <- paste(colnames(CTE.4.3.data), "-CTE.4.3", sep="")

#Concatenate to counts-by-condition.
control.data <- cbind(control.1.1.data, control.1.2.data, control.1.3.data, control.2.1.data, control.2.2.data, control.2.3.data, control.3.1.data, control.3.2.data, control.3.3.data, control.4.1.data, control.4.2.data, control.4.3.data)
CTE.data <- cbind(CTE.1.1.data, CTE.1.2.data, CTE.1.3.data, CTE.2.1.data, CTE.2.3.data, CTE.3.2.data, CTE.3.3.data, CTE.4.1.data, CTE.4.2.data, CTE.4.3.data)

#Build control Seurat object with quality control and add metadata.
control <- CreateSeuratObject(counts = control.data, project = "CTE_control")
control$condition <- "control"
control$bio_rep <- substr(substrRight(rownames(control@meta.data), 3), 1, 1)
control <- PercentageFeatureSet(object = control, pattern = "^MT-", col.name = "percent.mt")
control <- subset(x = control, subset = nFeature_RNA > 280 & nFeature_RNA < 2500 & percent.mt < 5)
control <- SCTransform(object = control, vars.to.regress = "percent.mt", conserve.memory = FALSE, return.only.var.genes = FALSE)

Perform basic analyses and visualization.
control_solo <- control
control_solo <- RunPCA(object = control_solo, npcs = 100)
ElbowPlot(object = control_solo, ndims = 100)
control_solo <- RunUMAP(control_solo, reduction = "pca", dims = 1:11, n.epochs = 600, parallel = FALSE)
control_solo <- FindNeighbors(object = control_solo, reduction = "pca", dims = 1:11)
control_solo <- FindClusters(control_solo, resolution = 0.3)
DimPlot(object = control_solo, reduction = "umap", label = TRUE)

#Use known marker genes to identify cell types.
#OPC.
FeaturePlot(object = control_solo, features = c("VCAN"), min.cutoff = "q9")
#Oligodendrocyte.
FeaturePlot(object = control_solo, features = c("CLDN11"), min.cutoff = "q9")
#Astrocyte.
FeaturePlot(object = control_solo, features = c("AQP4"), min.cutoff = "q9")
#Microglia.
FeaturePlot(object = control_solo, features = c("CD74"), min.cutoff = "q9")
#Neuron.
FeaturePlot(object = control_solo, features = c("MEG3"), min.cutoff = "q9")
#Endothelial Cell.
FeaturePlot(object = control_solo, features = c("CDH5"), min.cutoff = "q9")
#Pericyte.
FeaturePlot(object = control_solo, features = c("ZIC1"), min.cutoff = "q9")

#Rename cluster identities and re-visualize.
control_solo <- RenameIdents(object = control_solo, `0` = "OL1", `1` = "OL2", `2` = "Astro", `3` = "OPC", `4` = "Neuro", `5` = "OL3", `6` = "Micro", `7` = "OL4")
Idents(object = control_solo) <- factor(x = Idents(object = control_solo), levels = c("OL1", "OL2", "Astro", "OPC", "Neuro", "OL3", "Micro", "OL4"))
DimPlot(object = control_solo, reduction = "umap", split.by = "condition", label = TRUE)

#Build CTE Seurat object with quality control and add metadata.
CTE <- CreateSeuratObject(counts = CTE.data, project = "CTE_CTE")
CTE$condition <- "CTE"
CTE$bio_rep <- substr(substrRight(rownames(CTE@meta.data), 3), 1, 1)
CTE <- PercentageFeatureSet(object = CTE, pattern = "^MT-", col.name = "percent.mt")
CTE <- subset(x = CTE, subset = nFeature_RNA > 300 & nFeature_RNA < 2500 & percent.mt < 5)
CTE <- SCTransform(object = CTE, vars.to.regress = "percent.mt", conserve.memory = FALSE, return.only.var.genes = FALSE)

#Perform basic analyses and visualization.
CTE_solo <- CTE
CTE_solo <- RunPCA(object = CTE_solo, npcs = 100)
ElbowPlot(object = CTE_solo, ndims = 100)
CTE_solo <- RunUMAP(CTE_solo, reduction = "pca", dims = 1:12, n.epochs = 600, parallel = FALSE)
CTE_solo <- FindNeighbors(object = CTE_solo, reduction = "pca", dims = 1:12)
CTE_solo <- FindClusters(CTE_solo, resolution = 0.3)
DimPlot(object = CTE_solo, reduction = "umap", label = TRUE)

#Use known marker genes to identify cell types.
#OPC.
FeaturePlot(object = CTE_solo, features = c("VCAN"), min.cutoff = "q9")
#Oligodendrocyte.
FeaturePlot(object = CTE_solo, features = c("CLDN11"), min.cutoff = "q9")
#Astrocyte.
FeaturePlot(object = CTE_solo, features = c("AQP4"), min.cutoff = "q9")
#Microglia.
FeaturePlot(object = CTE_solo, features = c("CD74"), min.cutoff = "q9")
#Neuron.
FeaturePlot(object = CTE_solo, features = c("MEG3"), min.cutoff = "q9")
#Endothelial Cell.
FeaturePlot(object = CTE_solo, features = c("CDH5"), min.cutoff = "q9")
#Pericyte.
FeaturePlot(object = CTE_solo, features = c("ZIC1"), min.cutoff = "q9")

#Rename cluster identities and re-visualize.
CTE_solo <- RenameIdents(object = CTE_solo, `0` = "OL1", `1` = "OL2", `2` = "Astro", `3` = "Micro", `4` = "OPC", `5` = "Neuro", `6` = "OL3")
Idents(object = CTE_solo) <- factor(x = Idents(object = CTE_solo), levels = c("OL1", "OL2", "Astro", "Micro", "OPC", "Neuro", "OL3"))
DimPlot(object = CTE_solo, reduction = "umap", split.by = "condition", label = TRUE)

#Integrate Seurat objects.
CTE.anchors <- FindIntegrationAnchors(object.list = list(control, CTE), anchor.features = 3000, dims = 1:30)
CTE.combined <- IntegrateData(anchorset = CTE.anchors, dims = 1:30)


#---------- Integrated ----------


#Perform basic analyses and visualization.
CTE.combined <- ScaleData(object = CTE.combined)
CTE.combined <- RunPCA(object = CTE.combined, npcs = 100)
ElbowPlot(object = CTE.combined, ndims = 100)
CTE.combined <- RunUMAP(object = CTE.combined, reduction = "pca", dims = 1:23, n.epochs = 600, parallel = FALSE)
CTE.combined <- FindNeighbors(object = CTE.combined, reduction = "pca", dims = 1:23)
CTE.combined <- FindClusters(object = CTE.combined, resolution = 1)
DimPlot(object = CTE.combined, reduction = "umap", split.by = "condition", label = FALSE) + DarkTheme() + NoGrid()

#Get median UMIs, genes, and percent mitochondrial RNA per cell.
median(CTE.combined@meta.data$nCount_SCT)
median(CTE.combined@meta.data$nFeature_SCT)
median(CTE.combined@meta.data$percent.mt)

#Use known marker genes to identify cell types.
#OPC.
FeaturePlot(object = CTE.combined, features = c("VCAN"), min.cutoff = "q9")
#Oligodendrocyte.
FeaturePlot(object = CTE.combined, features = c("CLDN11"), min.cutoff = "q9")
#Astrocyte.
FeaturePlot(object = CTE.combined, features = c("AQP4"), min.cutoff = "q9")
#Microglia.
FeaturePlot(object = CTE.combined, features = c("CD74"), min.cutoff = "q9")
#Neuron.
FeaturePlot(object = CTE.combined, features = c("MEG3"), min.cutoff = "q9")
#Endothelial Cell.
FeaturePlot(object = CTE.combined, features = c("CDH5"), min.cutoff = "q9")
#Pericyte.
FeaturePlot(object = CTE.combined, features = c("CLDN5"), min.cutoff = "q9")

#Rename cluster identities and re-visualize.
CTE.combined <- RenameIdents(object = CTE.combined, `0` = "OL1", `1` = "OL2", `2` = "OL3", `3` = "OL4", `4` = "OL5", `5` = "Astro1", `6` = "Astro2", `7` = "OPC1", `8` = "Micro", `9` = "OL6", `10` = "Neuro", `11` = "OPC2", `12` = "OL7", `13` = "OL8", `14` = "OL9", `15` = "Peri")
Idents(object = CTE.combined) <- factor(x = Idents(object = CTE.combined), levels = c("OL1", "OL2", "OL3", "OL4", "OL5", "Astro1", "Astro2", "OPC1", "Micro", "OL6", "Neuro", "OPC2", "OL7", "OL8", "OL9", "Peri"))
VlnPlot(object = CTE.combined, features = c("nFeature_SCT", "nCount_SCT", "percent.mt"), ncol = 3, pt.size = 0)
p1 <- DimPlot(object = CTE.combined, reduction = "umap", group.by = "condition", label = FALSE) + DarkTheme() + NoGrid()
p2 <- DimPlot(object = CTE.combined, reduction = "umap", label = FALSE) + DarkTheme() + NoGrid()
plot_grid(p1, p2)
DimPlot(object = CTE.combined, reduction = "umap", split.by = "condition", label = FALSE) + DarkTheme() + NoGrid()

#Add meta-data.
CTE.combined$celltype <- Idents(object = CTE.combined)
CTE.combined$celltype.condition <- paste(CTE.combined$celltype, CTE.combined$condition, sep = "_")
CTE.combined$condition.bio_rep <- paste(CTE.combined$condition, CTE.combined$bio_rep, sep = "_")
CTE.combined$celltype.condition.bio_rep <- paste(CTE.combined$celltype.condition, CTE.combined$bio_rep, sep = "_")

#Set proper identities.
Idents(object = CTE.combined) <- "celltype.condition"


#---------- Oligodendrocyte Precursor Cells (OPCs) ----------


#Subset OPCs.
OPC <- SubsetData(object = CTE.combined, ident.use = c("OPC1_control", "OPC1_CTE", "OPC2_control", "OPC2_CTE"), do.clean = TRUE, do.scale = TRUE)

#Perform basic analyses and visualization.
OPC <- RunPCA(object = OPC, npcs = 100)
ElbowPlot(object = OPC, ndims = 100)
OPC <- RunUMAP(object = OPC, reduction = "pca", dims = 1:17, n.epochs = 600, parallel = FALSE)
OPC <- FindNeighbors(object = OPC, reduction = "pca", dims = 1:17)
OPC <- FindClusters(object = OPC, resolution = 0.5)
DimPlot(object = OPC, reduction = "umap", split.by = "condition", label = FALSE) + DarkTheme() + NoGrid()

#Rename cluster identities and re-visualize.
OPC <- RenameIdents(object = OPC, `0` = "OPC1", `1` = "OPC2", `2` = "OPC3", `3` = "OPC4", `4` = "OPC5")
Idents(object = OPC) <- factor(x = Idents(object = OPC), levels = c("OPC1", "OPC2", "OPC3", "OPC4", "OPC5"))
p1 <- DimPlot(object = OPC, reduction = "umap", group.by = "condition", label = FALSE) + DarkTheme() + NoGrid()
p2 <- DimPlot(object = OPC, reduction = "umap", label = FALSE) + DarkTheme() + NoGrid()
plot_grid(p1, p2)
DimPlot(object = OPC, reduction = "umap", split.by = "condition", label = FALSE) + DarkTheme() + NoGrid()

#Add meta-data.
OPC$celltype <- Idents(object = OPC)
OPC$celltype.condition <- paste(OPC$celltype, OPC$condition, sep = "_")
OPC$celltype.condition.bio_rep <- paste(OPC$celltype.condition, OPC$bio_rep, sep = "_")

#Set proper identities.
Idents(object = OPC) <- "celltype"

#Find marker genes for each cluster.
FindMarkers(object = OPC, ident.1 = "OPC1")
FindMarkers(object = OPC, ident.1 = "OPC2")
FindMarkers(object = OPC, ident.1 = "OPC3")
FindMarkers(object = OPC, ident.1 = "OPC4")
FindMarkers(object = OPC, ident.1 = "OPC5")

#Set proper identities.
Idents(object = OPC) <- "celltype.condition"

#Compare within clusters by condition.
FindMarkers(object = OPC, ident.1 = "OPC1_CTE", ident.2 = "OPC1_control")
FindMarkers(object = OPC, ident.1 = "OPC2_CTE", ident.2 = "OPC2_control")
FindMarkers(object = OPC, ident.1 = "OPC3_CTE", ident.2 = "OPC3_control")
FindMarkers(object = OPC, ident.1 = "OPC4_CTE", ident.2 = "OPC4_control")
FindMarkers(object = OPC, ident.1 = "OPC5_CTE", ident.2 = "OPC5_control")

#Find marker genes for each CTE cluster.
FindMarkers(object = OPC, ident.1 = "OPC1_CTE")
FindMarkers(object = OPC, ident.1 = "OPC2_CTE")
FindMarkers(object = OPC, ident.1 = "OPC3_CTE")
FindMarkers(object = OPC, ident.1 = "OPC4_CTE")
FindMarkers(object = OPC, ident.1 = "OPC5_CTE")


#---------- Oligodendrocytes (OLs) ----------


#Subset OLs.
OL <- SubsetData(object = CTE.combined, ident.use = c("OL1_control", "OL1_CTE", "OL2_control", "OL2_CTE", "OL3_control", "OL3_CTE", "OL4_control", "OL4_CTE", "OL5_control", "OL5_CTE", "OL6_control", "OL6_CTE", "OL7_control", "OL7_CTE", "OL8_control", "OL8_CTE", "OL9_control", "OL9_CTE"), do.clean = TRUE, do.scale = TRUE)

#Perform basic analyses and visualization.
OL <- RunPCA(object = OL, npcs = 100)
ElbowPlot(object = CTE.combined, ndims = 100)
OL <- RunUMAP(object = OL, reduction = "pca", dims = 1:17, n.epochs = 600, parallel = FALSE)
OL <- FindNeighbors(object = OL, reduction = "pca", dims = 1:17)
OL <- FindClusters(object = OL, resolution = 0.8)
DimPlot(object = OL, reduction = "umap", split.by = "condition", label = FALSE) + DarkTheme() + NoGrid()

#Rename cluster identities and re-visualize.
OL <- RenameIdents(object = OL, `0` = "OL1", `1` = "OL2", `2` = "OL3", `3` ="OL4", `4` = "OL5", `5` = "OL6", `6` = "OL7", `7` = "OL8", `8` = "OL9", `9` = "OL10", `10` = "OL11")
Idents(object = OL) <- factor(x = Idents(object = OL), levels = c("OL1", "OL2", "OL3", "OL4", "OL5", "OL6", "OL7", "OL8", "OL9", "OL10", "OL11"))
p1 <- DimPlot(object = OL, reduction = "umap", group.by = "condition", label = FALSE) + DarkTheme() + NoGrid()
p2 <- DimPlot(object = OL, reduction = "umap", label = FALSE) + DarkTheme() + NoGrid()
plot_grid(p1, p2)
DimPlot(object = OL, reduction = "umap", split.by = "condition", label = FALSE) + DarkTheme() + NoGrid()

#Add meta-data.
OL$celltype <- Idents(object = OL)
OL$celltype.condition <- paste(OL$celltype, OL$condition, sep = "_")
OL$celltype.condition.bio_rep <- paste(OL$celltype.condition, OL$bio_rep, sep = "_")

#Set proper identities.
Idents(object = OL) <- "celltype"

#Find marker genes for each cluster.
FindMarkers(object = OL, ident.1 = "OL1")
FindMarkers(object = OL, ident.1 = "OL2")
FindMarkers(object = OL, ident.1 = "OL3")
FindMarkers(object = OL, ident.1 = "OL4")
FindMarkers(object = OL, ident.1 = "OL5")
FindMarkers(object = OL, ident.1 = "OL6")
FindMarkers(object = OL, ident.1 = "OL7")
FindMarkers(object = OL, ident.1 = "OL8")
FindMarkers(object = OL, ident.1 = "OL9")
FindMarkers(object = OL, ident.1 = "OL10")
FindMarkers(object = OL, ident.1 = "OL11")

#Set proper identities.
Idents(object = OL) <- "celltype.condition"

#Compare within clusters by condition.
FindMarkers(object = OL, ident.1 = "OL1_CTE", ident.2 = "OL1_control")
FindMarkers(object = OL, ident.1 = "OL2_CTE", ident.2 = "OL2_control")
FindMarkers(object = OL, ident.1 = "OL3_CTE", ident.2 = "OL3_control")
FindMarkers(object = OL, ident.1 = "OL4_CTE", ident.2 = "OL4_control")
FindMarkers(object = OL, ident.1 = "OL5_CTE", ident.2 = "OL5_control")
FindMarkers(object = OL, ident.1 = "OL6_CTE", ident.2 = "OL6_control")
FindMarkers(object = OL, ident.1 = "OL7_CTE", ident.2 = "OL7_control")
FindMarkers(object = OL, ident.1 = "OL8_CTE", ident.2 = "OL8_control")
FindMarkers(object = OL, ident.1 = "OL9_CTE", ident.2 = "OL9_control")
FindMarkers(object = OL, ident.1 = "OL10_CTE", ident.2 = "OL10_control")
FindMarkers(object = OL, ident.1 = "OL11_CTE", ident.2 = "OL11_control")

#Find marker genes for each CTE cluster.
FindMarkers(object = OL, ident.1 = "OL1_CTE")
FindMarkers(object = OL, ident.1 = "OL2_CTE")
FindMarkers(object = OL, ident.1 = "OL3_CTE")
FindMarkers(object = OL, ident.1 = "OL4_CTE")
FindMarkers(object = OL, ident.1 = "OL5_CTE")
FindMarkers(object = OL, ident.1 = "OL6_CTE")
FindMarkers(object = OL, ident.1 = "OL7_CTE")
FindMarkers(object = OL, ident.1 = "OL8_CTE")
FindMarkers(object = OL, ident.1 = "OL9_CTE")
FindMarkers(object = OL, ident.1 = "OL10_CTE")
FindMarkers(object = OL, ident.1 = "OL11_CTE")


#---------- Astrocytes ----------


#Subset astrocytes.
astro <- SubsetData(object = CTE.combined, ident.use = c("Astro1_control", "Astro1_CTE", "Astro2_control", "Astro2_CTE"), do.clean = TRUE, do.scale = TRUE)

#Perform basic analyses and visualization.
astro <- RunPCA(object = astro, npcs = 100)
ElbowPlot(object = astro, ndims = 100)
astro <- RunUMAP(object = astro, reduction = "pca", dims = 1:15, n.epochs = 600, parallel = FALSE)
astro <- FindNeighbors(object = astro, reduction = "pca", dims = 1:15)
astro <- FindClusters(object = astro, resolution = 0.5)
DimPlot(object = astro, reduction = "umap", split.by = "condition", label = FALSE) + DarkTheme() + NoGrid()

#Rename cluster identities and re-visualize.
astro <- RenameIdents(object = astro, `0` = "astro1", `1` = "astro2", `2` = "astro3", `3` = "astro4", `4` = "astro5", `5` = "astro6")
Idents(object = astro) <- factor(x = Idents(object = astro), levels = c("astro1", "astro2", "astro3", "astro4", "astro5", "astro6"))
p1 <- DimPlot(object = astro, reduction = "umap", group.by = "condition", label = FALSE) + DarkTheme() + NoGrid()
p2 <- DimPlot(object = astro, reduction = "umap", label = FALSE) + DarkTheme() + NoGrid()
plot_grid(p1, p2)
DimPlot(object = astro, reduction = "umap", split.by = "condition", label = FALSE) + DarkTheme() + NoGrid()

#Add meta-data.
astro$celltype <- Idents(object = astro)
astro$celltype.condition <- paste(astro$celltype, astro$condition, sep = "_")
astro$celltype.condition.bio_rep <- paste(astro$celltype.condition, astro$bio_rep, sep = "_")

#Set proper identities.
Idents(object = astro) <- "celltype"

#Find marker genes for each cluster.
FindMarkers(object = astro, ident.1 = "astro1")
FindMarkers(object = astro, ident.1 = "astro2")
FindMarkers(object = astro, ident.1 = "astro3")
FindMarkers(object = astro, ident.1 = "astro4")
FindMarkers(object = astro, ident.1 = "astro5")
FindMarkers(object = astro, ident.1 = "astro6")

#Set proper identities.
Idents(object = astro) <- "celltype.condition"

#Compare within clusters by condition.
FindMarkers(object = astro, ident.1 = "astro1_CTE", "astro1_control")
FindMarkers(object = astro, ident.1 = "astro2_CTE", "astro2_control")
FindMarkers(object = astro, ident.1 = "astro3_CTE", "astro3_control")
FindMarkers(object = astro, ident.1 = "astro4_CTE", "astro4_control")
FindMarkers(object = astro, ident.1 = "astro5_CTE", "astro5_control")
FindMarkers(object = astro, ident.1 = "astro6_CTE", "astro6_control")

#Find marker genes for each CTE cluster.
FindMarkers(object = astro, ident.1 = "astro1_CTE")
FindMarkers(object = astro, ident.1 = "astro2_CTE")
FindMarkers(object = astro, ident.1 = "astro3_CTE")
FindMarkers(object = astro, ident.1 = "astro4_CTE")
FindMarkers(object = astro, ident.1 = "astro5_CTE")
FindMarkers(object = astro, ident.1 = "astro6_CTE")


#---------- Microglia ----------


#Subset microglia.
micro <- SubsetData(object = CTE.combined, ident.use = c("Micro_CTE", "Micro_control"), do.clean = TRUE, do.scale = TRUE)

#Perform basic analysis and visualization.
micro <- RunPCA(object = micro, npcs = 100)
ElbowPlot(object = micro, ndims = 100)
micro <- RunUMAP(object = micro, reduction = "pca", dims = 1:11, n.epochs = 600, parallel = FALSE)
micro <- FindNeighbors(object = micro, reduction = "pca", dims = 1:11)
micro <- FindClusters(object = micro, resolution = 0.5)
DimPlot(object = micro, reduction = "umap", split.by = "condition", label = FALSE) + DarkTheme() + NoGrid()

#Rename cluster identities and re-visualize.
micro <- RenameIdents(object = micro, `0` = "micro1", `1` = "micro2", `2` = "micro3")
Idents(object = micro) <- factor(x = Idents(object = micro), levels = c("micro1", "micro2", "micro3"))
p1 <- DimPlot(object = micro, reduction = "umap", group.by = "condition", label = FALSE) + DarkTheme() + NoGrid()
p2 <- DimPlot(object = micro, reduction = "umap", label = FALSE) + DarkTheme() + NoGrid()
plot_grid(p1, p2)
DimPlot(object = micro, reduction = "umap", split.by = "condition", label = FALSE) + DarkTheme() + NoGrid()

#Add meta-data.
micro$celltype <- Idents(object = micro)
micro$celltype.condition <- paste(micro$celltype, micro$condition, sep = "_")
micro$celltype.condition.bio_rep <- paste(micro$celltype.condition, micro$bio_rep, sep = "_")

#Set proper identitites.
Idents(object = micro) <- "celltype"

#Find marker genes for each cluster.
FindMarkers(object = micro, ident.1 = "micro1")
FindMarkers(object = micro, ident.1 = "micro2")
FindMarkers(object = micro, ident.1 = "micro3")

#Set proper identities.
Idents(object = micro) <- "celltype.condition"

#Compare within clusters by condition.
FindMarkers(object = micro, ident.1 = "micro1_CTE", ident.2 = "micro1_control")
FindMarkers(object = micro, ident.1 = "micro2_CTE", ident.2 = "micro2_control")
FindMarkers(object = micro, ident.1 = "micro3_CTE", ident.2 = "micro3_control")

#Find marker genes for each CTE cluster.
FindMarkers(object = micro, ident.1 = "micro1_CTE")
FindMarkers(object = micro, ident.1 = "micro2_CTE")
FindMarkers(object = micro, ident.1 = "micro3_CTE")


#---------- Neurons ----------


#Subset neurons.
neuro <- SubsetData(object = CTE.combined, ident.use = c("Neuro_CTE", "Neuro_control"), do.clean = TRUE, do.scale = TRUE)

#Perform basic analysis and visualization.
neuro <- RunPCA(object = neuro, npcs = 100)
ElbowPlot(object = neuro, ndims = 100)
neuro <- RunUMAP(object = neuro, reduction = "pca", dims = 1:17, n.epochs = 600, parallel = FALSE)
neuro <- FindNeighbors(object = neuro, reduction = "pca", dims = 1:17)
neuro <- FindClusters(object = neuro, resolution = 0.5)
DimPlot(object = neuro, reduction = "umap", split.by = "condition", label = FALSE) + DarkTheme() + NoGrid()

#Rename cluster identities and re-visualize.
neuro <- RenameIdents(object = neuro, `0` = "neuro1", `1` = "neuro2", `2` = "neuro3", `3` = "neuro4")
Idents(object = neuro) <- factor(x = Idents(object = neuro), levels = c("neuro1", "neuro2", "neuro3", "neuro4"))
p1 <- DimPlot(object = neuro, reduction = "umap", group.by = "condition", label = FALSE) + DarkTheme() + NoGrid()
p2 <- DimPlot(object = neuro, reduction = "umap", label = FALSE) + DarkTheme() + NoGrid()
plot_grid(p1, p2)
DimPlot(object = neuro, reduction = "umap", split.by = "condition", label = FALSE) + DarkTheme() + NoGrid()

#Add meta-data.
neuro$celltype <- Idents(object = neuro)
neuro$celltype.condition <- paste(neuro$celltype, neuro$condition, sep = "_")
neuro$celltype.condition.bio_rep <- paste(neuro$celltype.condition, neuro$bio_rep, sep = "_")

#Set proper identitites.
Idents(object = neuro) <- "celltype"

#Find marker genes for each cluster.
FindMarkers(object = neuro, ident.1 = "neuro1")
FindMarkers(object = neuro, ident.1 = "neuro2")
FindMarkers(object = neuro, ident.1 = "neuro3")
FindMarkers(object = neuro, ident.1 = "neuro4")

#Set proper identities.
Idents(object = neuro) <- "celltype.condition"

#Compare within clusters by condition.
FindMarkers(object = neuro, ident.1 = "neuro1_CTE", ident.2 = "neuro1_control")
FindMarkers(object = neuro, ident.1 = "neuro2_CTE", ident.2 = "neuro2_control")
FindMarkers(object = neuro, ident.1 = "neuro3_CTE", ident.2 = "neuro3_control")
FindMarkers(object = neuro, ident.1 = "neuro4_CTE", ident.2 = "neuro4_control")

#Find marker genes for each CTE cluster.
FindMarkers(object = neuro, ident.1 = "neuro1_CTE")
FindMarkers(object = neuro, ident.1 = "neuro2_CTE")
FindMarkers(object = neuro, ident.1 = "neuro3_CTE")
FindMarkers(object = neuro, ident.1 = "neuro4_CTE")


#---------- Extra ----------


#Create a feature plot.
FeaturePlot(object = @, features = "@", split.by = "condition")

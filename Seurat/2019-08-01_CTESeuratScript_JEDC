#This script is designed to work within an R-project directory that contains the original counts files.
#If an R-project directory is not in use, set a working directory and add the original count files.

#View Seurat vignette.
#https://satijalab.org/seurat/get_started.html


#---------- Initiation ----------


#Load packages.
library(cowplot)
library(dplyr)
library(reticulate)
library(scater)
library(Seurat)

#Set python environment.
use_python("C:/Users/josep/AppData/Local/Programs/Python/Python37/python.exe")

#Read-in counts.
control.1.1.data <- readSparseCounts("L5618_1.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
control.1.2.data <- readSparseCounts("L5618_2.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
control.1.3.data <- readSparseCounts("L5618_3.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
control.2.1.data <- readSparseCounts("L5864_1.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
control.2.2.data <- readSparseCounts("L5864_2.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
control.2.3.data <- readSparseCounts("L5864_3.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
control.3.1.data <- readSparseCounts("L6020_1.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
control.3.2.data <- readSparseCounts("L6020_2.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
control.3.3.data <- readSparseCounts("L6020_3.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
control.4.1.data <- readSparseCounts("L6085_1.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
control.4.2.data <- readSparseCounts("L6085_2.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
control.4.3.data <- readSparseCounts("L6085_3.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
CTE.1.1.data <- readSparseCounts("K177_1.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
CTE.1.2.data <- readSparseCounts("K177_2.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
CTE.1.3.data <- readSparseCounts("K177_3.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
CTE.2.1.data <- readSparseCounts("K18_1.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
CTE.2.2.data <- readSparseCounts("K18_2.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
CTE.2.3.data <- readSparseCounts("K18_3.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
CTE.3.1.data <- readSparseCounts("SLI124_1.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
CTE.3.2.data <- readSparseCounts("SLI124_2.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
CTE.3.3.data <- readSparseCounts("SLI124_3.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
CTE.4.1.data <- readSparseCounts("SLI131_1.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
CTE.4.2.data <- readSparseCounts("SLI131_2.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)
CTE.4.3.data <- readSparseCounts("SLI131_3.counts.tsv", sep = "\t", row.names = TRUE, col.names = TRUE)

#Transpose counts.
control.1.1.data <- t(control.1.1.data)
control.1.2.data <- t(control.1.2.data)
control.1.3.data <- t(control.1.3.data)
control.2.1.data <- t(control.2.1.data)
control.2.2.data <- t(control.2.2.data)
control.2.3.data <- t(control.2.3.data)
control.3.1.data <- t(control.3.1.data)
control.3.2.data <- t(control.3.2.data)
control.3.3.data <- t(control.3.3.data)
control.4.1.data <- t(control.4.1.data)
control.4.2.data <- t(control.4.2.data)
control.4.3.data <- t(control.4.3.data)
CTE.1.1.data <- t(CTE.1.1.data)
CTE.1.2.data <- t(CTE.1.2.data)
CTE.1.3.data <- t(CTE.1.3.data)
CTE.2.1.data <- t(CTE.2.1.data)
CTE.2.2.data <- t(CTE.2.2.data)
CTE.2.3.data <- t(CTE.2.3.data)
CTE.3.1.data <- t(CTE.3.1.data)
CTE.3.2.data <- t(CTE.3.2.data)
CTE.3.3.data <- t(CTE.3.3.data)
CTE.4.1.data <- t(CTE.4.1.data)
CTE.4.2.data <- t(CTE.4.2.data)
CTE.4.3.data <- t(CTE.4.3.data)

#Add condition, biological replicate, and technical replicate identifiers.
colnames(control.1.1.data) <- paste(colnames(control.1.1.data), "-control.1.1", sep="")
colnames(control.1.2.data) <- paste(colnames(control.1.2.data), "-control.1.2", sep="")
colnames(control.1.3.data) <- paste(colnames(control.1.3.data), "-control.1.3", sep="")
colnames(control.2.1.data) <- paste(colnames(control.2.1.data), "-control.2.1", sep="")
colnames(control.2.2.data) <- paste(colnames(control.2.2.data), "-control.2.2", sep="")
colnames(control.2.3.data) <- paste(colnames(control.2.3.data), "-control.2.3", sep="")
colnames(control.3.1.data) <- paste(colnames(control.3.1.data), "-control.3.1", sep="")
colnames(control.3.2.data) <- paste(colnames(control.3.2.data), "-control.3.2", sep="")
colnames(control.3.3.data) <- paste(colnames(control.3.3.data), "-control.3.3", sep="")
colnames(control.4.1.data) <- paste(colnames(control.4.1.data), "-control.4.1", sep="")
colnames(control.4.2.data) <- paste(colnames(control.4.2.data), "-control.4.2", sep="")
colnames(control.4.3.data) <- paste(colnames(control.4.3.data), "-control.4.3", sep="")
colnames(CTE.1.1.data) <- paste(colnames(CTE.1.1.data), "-CTE.1.1", sep="")
colnames(CTE.1.2.data) <- paste(colnames(CTE.1.2.data), "-CTE.1.2", sep="")
colnames(CTE.1.3.data) <- paste(colnames(CTE.1.3.data), "-CTE.1.3", sep="")
colnames(CTE.2.1.data) <- paste(colnames(CTE.2.1.data), "-CTE.2.1", sep="")
colnames(CTE.2.2.data) <- paste(colnames(CTE.2.2.data), "-CTE.2.2", sep="")
colnames(CTE.2.3.data) <- paste(colnames(CTE.2.3.data), "-CTE.2.3", sep="")
colnames(CTE.3.1.data) <- paste(colnames(CTE.3.1.data), "-CTE.3.1", sep="")
colnames(CTE.3.2.data) <- paste(colnames(CTE.3.2.data), "-CTE.3.2", sep="")
colnames(CTE.3.3.data) <- paste(colnames(CTE.3.3.data), "-CTE.3.3", sep="")
colnames(CTE.4.1.data) <- paste(colnames(CTE.4.1.data), "-CTE.4.1", sep="")
colnames(CTE.4.2.data) <- paste(colnames(CTE.4.2.data), "-CTE.4.2", sep="")
colnames(CTE.4.3.data) <- paste(colnames(CTE.4.3.data), "-CTE.4.3", sep="")

#Concatenate to counts-by-condition.
control.data <- cbind(control.1.1.data, control.1.2.data, control.1.3.data, control.2.1.data, control.2.2.data, control.2.3.data, control.3.1.data, control.3.2.data, control.3.3.data, control.4.1.data, control.4.2.data, control.4.3.data)
CTE.data <- cbind(CTE.1.1.data, CTE.1.2.data, CTE.1.3.data, CTE.2.1.data, CTE.2.2.data, CTE.2.3.data, CTE.3.1.data, CTE.3.2.data, CTE.3.3.data, CTE.4.1.data, CTE.4.2.data, CTE.4.3.data)

#Build control Seurat object with quality control.
control <- CreateSeuratObject(counts = control.data, min.cells = 10)
control$condition <- "control"
control[["percent.mt"]] <- PercentageFeatureSet(object = control, pattern = "^MT-")
control <- subset(x = control, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
control <- NormalizeData(object = control, verbose = FALSE)
control <- FindVariableFeatures(object = control, selection.method = "vst", nfeatures = 2000)

#Build CTE Seurat object with quality control.
CTE <- CreateSeuratObject(counts = CTE.data, min.cells = 10)
CTE$condition <- "CTE"
CTE[["percent.mt"]] <- PercentageFeatureSet(object = CTE, pattern = "^MT-")
CTE <- subset(x = CTE, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
CTE <- NormalizeData(object = CTE, verbose = FALSE)
CTE <- FindVariableFeatures(object = CTE, selection.method = "vst", nfeatures = 2000)

#Integrate Seurat objects.
CTE.anchors <- FindIntegrationAnchors(object.list = list(control, CTE), dims = 1:20)
CTE.combined <- IntegrateData(anchorset = CTE.anchors, dims = 1:20)


#---------- Integrated ----------


#Perform mitochondrial RNA quality control, basic analyses, and visualization.
DefaultAssay(object = CTE.combined) <- "integrated"
CTE.combined <- ScaleData(object = CTE.combined, vars.to.regress = 'percent.mt', verbose = FALSE)
CTE.combined <- RunPCA(object = CTE.combined, npcs = 30, verbose = FALSE)
CTE.combined <- RunUMAP(object = CTE.combined, reduction = "pca", dims = 1:30)
CTE.combined <- FindNeighbors(object = CTE.combined, reduction = "pca", dims = 1:30)
CTE.combined <- FindClusters(CTE.combined, resolution = 0.5)
VlnPlot(object = CTE.combined, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
p1 <- DimPlot(object = CTE.combined, reduction = "umap", group.by = "condition")
p2 <- DimPlot(object = CTE.combined, reduction = "umap", label = TRUE)
plot_grid(p1, p2)
DimPlot(object = CTE.combined, reduction = "umap", split.by = "condition")

#Get median UMIs, genes, and percent mitochondrial RNA per cell.
median(CTE.combined@meta.data$nCount_RNA)
median(CTE.combined@meta.data$nFeature_RNA)
median(CTE.combined@meta.data$percent.mt)

#Find marker genes.
CTE_markers <- FindAllMarkers(object = CTE.combined, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
top_CTE_markers <- CTE_markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_logFC)
top_CTE_markers[,]

#Use known marker genes to identify cell types.
#OPC.
FeaturePlot(object = CTE.combined, features = c("VCAN"), min.cutoff = "q9")
#Oligodendrocyte.
FeaturePlot(object = CTE.combined, features = c("CLDN11"), min.cutoff = "q9")
#Astrocyte.
FeaturePlot(object = CTE.combined, features = c("AQP4"), min.cutoff = "q9")
#Neuron.
FeaturePlot(object = CTE.combined, features = c("MEG3"), min.cutoff = "q9")
#Endothelial Cell.
FeaturePlot(object = CTE.combined, features = c("CDH5"), min.cutoff = "q9")
#Microglia.
FeaturePlot(object = CTE.combined, features = c("TMEM119"), min.cutoff = "q9")
#Pericyte.
FeaturePlot(object = CTE.combined, features = c("PDGFRB"), min.cutoff = "q9")

#Rename cluster identities and re-visualize.
CTE.combined <- RenameIdents(object = CTE.combined, `0` = )
Idents(object = CTE.combined) <- factor(x = Idents(object = CTE.combined), levels = c())
DimPlot(object = CTE.combined, reduction = "umap", split.by = "condition", label = TRUE)

#Add meta-data. 
CTE.combined$celltype.condition <- paste(Idents(object = CTE.combined), CTE.combined$condition, sep = "_")
CTE.combined$celltype <- Idents(object = CTE.combined)
Idents(object = CTE.combined) <- "celltype.condition"

#Quantify cell counts by condition per cell type.
table(CTE.combined@meta.data$celltype.condition)

#Perform differential gene expression analysis by cell type and add comparison meta-data.
#OPC1 Sub-Cluster.
int.OPC1_CTE.OPC1_control <- FindMarkers(object = CTE.combined, ident.1 = "OPC1_CTE", ident.2 = "OPC1_control", verbose = FALSE)
int.OPC1_CTE.OPC1_control <- int.OPC1_CTE.OPC1_control[((int.OPC1_CTE.OPC1_control$avg_logFC >= 1) | (int.OPC1_CTE.OPC1_control$avg_logFC <= -1)) & (int.OPC1_CTE.OPC1_control$p_val_adj <= 0.05),]
int.OPC1_CTE.OPC1_control$gene_name <- rownames(int.OPC1_CTE.OPC1_control)
int.OPC1_CTE.OPC1_control<- cbind(int.OPC1_CTE.OPC1_control, pct.1.name = rep(NA, length(row.names(int.OPC1_CTE.OPC1_control))), pct.2.name = rep(NA, length(rownames(int.OPC1_CTE.OPC1_control))), comparison = rep(NA, length(rownames(int.OPC_CTE.OPC_control))))
int.OPC1_CTE.OPC1_control$pct.1.name <- "int.OPC1_CTE"
int.OPC1_CTE.OPC1_control$pct.2.name <- "int.OPC1_control"
int.OPC1_CTE.OPC1_control$comparison <- "between_conditions"
int.OPC1_CTE.OPC1_control
#OL1 Sub-Cluster.
int.OL1_CTE.OL1_control <- FindMarkers(object = CTE.combined, ident.1 = "OL1_CTE", ident.2 = "OL1_control", verbose = FALSE)
int.OL1_CTE.OL1_control <- int.OL1_CTE.OL1_control[((int.OL1_CTE.OL1_control$avg_logFC >= 1) | (int.OL1_CTE.OL1_control$avg_logFC <= -1)) & (int.OL1_CTE.OL1_control$p_val_adj <= 0.05),]
int.OL1_CTE.OL1_control$gene_name <- rownames(int.OL1_CTE.OL1_control)
int.OL1_CTE.OL1_control <- cbind(int.OL1_CTE.OL1_control, pct.1.name = rep(NA, length(rownames(int.OL1_CTE.OL1_control))), pct.2.name = rep(NA, length(rownames(int.OL1_CTE.OL1_control))), comparison = rep(NA, length(rownames(int.OL1_CTE.OL1_control))))
int.OL1_CTE.OL1_control$pct.1.name <- "int.OL1_CTE"
int.OL1_CTE.OL1_control$pct.2.name <- "int.OL1_control"
int.OL1_CTE.OL1_control$comparison <- "between_conditions"
int.OL1_CTE.OL1_control
#Astro1 Sub-Cluster.
int.astro1_CTE.astro1_control <- FindMarkers(object = CTE.combined, ident.1 = "Astro1_CTE", ident.2 = "Astro1_control", verbose = FALSE)
int.astro1_CTE.astro1_control <- int.astro1_CTE.astro1_control[((int.astro1_CTE.astro1_control$avg_logFC >= 1) | (int.astro1_CTE.astro1_control$avg_logFC <= -1)) & (int.astro1_CTE.astro1_control$p_val_adj <= 0.05),]
int.astro1_CTE.astro1_control$gene_name <- rownames(int.astro1_CTE.astro1_control)
int.astro1_CTE.astro1_control <- cbind(int.astro1_CTE.astro1_control, pct.1.name = rep(NA, length(rownames(int.astro1_CTE.astro1_control))), pct.2.name = rep(NA, length(rownames(int.astro1_CTE.astro1_control))), comparison = rep(NA, length(rownames(int.astro1_CTE.astro1_control))))
int.astro1_CTE.astro1_control$pct.1.name <- "int.astro1_CTE"
int.astro1_CTE.astro1_control$pct.2.name <- "int.astro1_control"
int.astro1_CTE.astro1_control$comparison <- "between_conditions"
int.astro1_CTE.astro1_control
#Neuron1 Sub-Cluster.
int.neuron1_CTE.neuron1_control <- FindMarkers(object = CTE.combined, ident.1 = "Neuron1_CTE", ident.2 = "Neuron1_control", verbose = FALSE)
int.neuron1_CTE.neuron1_control <- int.neuron1_CTE.neuron1_control[((int.neuron1_CTE.neuron1_control$avg_logFC >= 1) | (int.neuron1_CTE.neuron1_control$avg_logFC <= -1)) & (int.neuron1_CTE.neuron1_control$p_val_adj <= 0.05),]
int.neuron1_CTE.neuron1_control$gene_name <- rownames(int.neuron1_CTE.neuron1_control)
int.neuron1_CTE.neuron1_control <- cbind(int.neuron1_CTE.neuron1_control, pct.1.name = rep(NA, length(rownames(int.neuron1_CTE.neuron1_control))), pct.2.name = rep(NA, length(rownames(int.neuron1_CTE.neuron1_control))), comparison = rep(NA, length(rownames(int.neuron1_CTE.neuron1_control))))
int.neuron1_CTE.neuron1_control$pct.1.name <- "int.neuron1_CTE"
int.neuron1_CTE.neuron1_control$pct.2.name <- "int.neuron1_control"
int.neuron1_CTE.neuron1_control$comparison <- "between_conditions"
int.neuron1_CTE.neuron1_control
#Endo1 Sub-Cluster.
int.endo1_CTE.endo1_control <- FindMarkers(object = CTE.combined, ident.1 = "Endo1_CTE", ident.2 = "Endo1_control", verbose = FALSE)
int.endo1_CTE.endo1_control <- int.endo1_CTE.endo1_control[((int.endo1_CTE.endo1_control$avg_logFC >= 1) | (int.endo1_CTE.endo1_control$avg_logFC <= -1)) & (int.endo1_CTE.endo1_control$p_val_adj <= 0.05),]
int.endo1_CTE.endo1_control$gene_name <- rownames(int.endo1_CTE.endo1_control)
int.endo1_CTE.endo1_control <- cbind(int.endo1_CTE.endo1_control, pct.1.name = rep(NA, length(rownames(int.endo1_CTE.endo1_control))), pct.2.name = rep(NA, length(rownames(int.endo1_CTE.endo1_control))), comparison = rep(NA, length(rownames(int.endo1_CTE.endo1_control))))
int.endo1_CTE.endo1_control$pct.1.name <- "int.endo1_CTE"
int.endo1_CTE.endo1_control$pct.2.name <- "int.endo1_control"
int.endo1_CTE.endo1_control$comparison <- "between_conditions"
int.endo1_CTE.endo1_control
#MG1 Sub-Cluster.
int.MG1_CTE.MG1_control <- FindMarkers(object = CTE.combined, ident.1 = "MG1_CTE", ident.2 = "MG1_control", verbose = FALSE)
int.MG1_CTE.MG1_control <- int.MG1_CTE.MG1_control[((int.MG1_CTE.MG1_control$avg_logFC >= 1) | (int.MG1_CTE.MG1_control$avg_logFC <= -1)) & (int.MG1_CTE.MG1_control$p_val_adj <= 0.05),]
int.MG1_CTE.MG1_control$gene_name <- rownames(int.MG1_CTE.MG1_control)
int.MG1_CTE.MG1_control <- cbind(int.MG1_CTE.MG1_control, pct.1.name = rep(NA, length(rownames(int.MG1_CTE.MG1_control))), pct.2.name = rep(NA, length(rownames(int.MG1_CTE.MG1_control))), comparison = rep(NA, length(rownames(int.MG1_CTE.MG1_control))))
int.MG1_CTE.MG1_control$pct.1.name <- "int.MG1_CTE"
int.MG1_CTE.MG1_control$pct.2.name <- "int.MG1_control"
int.MG1_CTE.MG1_control$comparison <- "between_conditions"
int.MG1_CTE.MG1_control
#Peri1
int.peri1_CTE.peri1_control <- FindMarkers(object = CTE.combined, ident.1 = "Peri1_CTE", ident.2 = "Peri1_control", verbose = FALSE)
int.peri1_CTE.peri1_control <- int.peri1_CTE.peri1_control[((int.peri1_CTE.peri1_control$avg_logFC >= 1) | (int.peri1_CTE.peri1_control$avg_logFC <= -1)) & (int.peri1_CTE.peri1_control$p_val_adj <= 0.05),]
int.peri1_CTE.peri1_control$gene_name <- rownames(int.peri1_CTE.peri1_control)
int.peri1_CTE.peri1_control <- cbind(int.peri1_CTE.peri1_control, pct.1.name = rep(NA, length(rownames(int.peri1_CTE.peri1_control))), pct.2.name = rep(NA, length(rownames(int.peri1_CTE.peri1_control))), comparison = rep(NA, length(rownames(int.peri1_CTE.peri1_control))))
int.peri1_CTE.peri1_control$pct.1.name <- "int.peri1_CTE"
int.peri1_CTE.peri1_control$pct.2.name <- "int.peri1_control"
int.peri1_CTE.peri1_control$comparison <- "between_conditions"
int.peri1_CTE.peri1_control

#Get all differentially expressed genes.
int_diff_genes <- rbind(int.OPC1_CTE.OPC1_control, int.OL1_CTE.OL1_control, int.astro1_CTE.astro1_control, int.neuron1_CTE.neuron1_control, int.endo1_CTE.endo1_control, int.MG1_CTE.MG1_control, int.peri1_CTE.peri1_control)
rownames(int_diff_genes) <- int_diff_genes$gene_name
int_diff_genes$subset <- "integrated"
write.csv(int_diff_genes, file = "2019-08-XX_CTEIntegratedGenes_JEDC")


#---------- Oligodendrocyte Precursor Cells (OPCs) ----------


#Subset OPCs.
OPC <- SubsetData(object = CTE.combined, ident.use = c("OPC1_CTE", "OPC1_control"), do.clean = TRUE, do.scale = TRUE)

#Perform basic analyses and visualization.
OPC <- FindVariableFeatures(object = OPC, selection.method = "vst", nfeatures = 2000)
OPC <- ScaleData(object = OPC, verbose = FALSE)
OPC <- RunPCA(object = OPC, npcs = 30, verbose = FALSE)
OPC <- RunUMAP(object = OPC, reduction = "pca", dims = 1:30)
OPC <- FindNeighbors(object = OPC, reduction = "pca", dims = 1:30)
OPC <- FindClusters(OPC, resolution = 0.5)
p1 <- DimPlot(object = OPC, reduction = "umap", group.by = "condition")
p2 <- DimPlot(object = OPC, reduction = "umap", label = TRUE)
plot_grid(p1, p2)
DimPlot(object = OPC, reduction = "umap", split.by = "condition")

#Find marker genes.
OPC_markers <- FindAllMarkers(object = OPC, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
top_OPC_markers <- OPC_markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_logFC)
top_OPC_markers[,]

#Rename cluster identities and re-visualize.
OPC <- RenameIdents(object = OPC, `0` = )
Idents(object = OPC) <- factor(x = Idents(object = OPC), levels = c())
DimPlot(object = OPC, reduction = "umap", split.by = "condition", label = TRUE)

#Add meta-data.
OPC$celltype.condition <- paste(Idents(object = OPC), OPC$condition, sep = "_")
OPC$celltype <- Idents(object = OPC)
Idents(object = OPC) <- "celltype.condition"

#Quantify cell counts by condition per cell type.
table(OPC@meta.data$celltype.condition)

#Perform differential gene expression analysis by cell type and add comparison meta-data.
#OPC1 Sub-Cluster.
OPC1_CTE.OPC1_control <- FindMarkers(object = OPC, ident.1 = "OPC1_CTE", ident.2 = "OPC1_control", verbose = FALSE)
OPC1_CTE.OPC1_control <- OPC1_CTE.OPC1_control[((OPC1_CTE.OPC1_control$avg_logFC >= 1) | (OPC1_CTE.OPC1_control$avg_logFC <= -1)) & (OPC1_CTE.OPC1_control$p_val_adj <= 0.05),]
OPC1_CTE.OPC1_control$gene_name <- rownames(OPC1_CTE.OPC1_control)
OPC1_CTE.OPC1_control <- cbind(OPC1_CTE.OPC1_control, pct.1.name = rep(NA, length(rownames(OPC1_CTE.OPC1_control))), pct.2.name = rep(NA, length(rownames(OPC1_CTE.OPC1_control))), comparison = rep(NA, length(rownames(OPC1_CTE.OPC1_control))))
OPC1_CTE.OPC1_control$pct.1.name <- "OPC1_CTE"
OPC1_CTE.OPC1_control$pct.2.name <- "OPC1_control"
OPC1_CTE.OPC1_control$comparison <- "between_conditions"
OPC1_CTE.OPC1_control

#Get all differentially expressed genes.
OPC_diff_genes <- rbind(OPC1_CTE.OPC1_control)
rownames(OPC_diff_genes) <- OPC_diff_genes$gene_name
OPC_diff_genes$subset <- "OPC"
write.csv(OPC_diff_genes, file = "2019-08-XX_CTEOPCGenes_JEDC")


#---------- Oligodendrocytes (OLs) ----------


#Subset OLs.
OL <- SubsetData(object = CTE.combined, ident.use = c("OL1_CTE", "OL1_control"), do.clean = TRUE, do.scale = TRUE)

#Perform basic analyses and visualization.
OL <- FindVariableFeatures(object = OL, selection.method = "vst", nfeatures = 2000)
OL <- ScaleData(object = OL, verbose = FALSE)
OL <- RunPCA(object = OL, npcs = 30, verbose = FALSE)
OL <- RunUMAP(object = OL, reduction = "pca", dims = 1:30)
OL <- FindNeighbors(object = OL, reduction = "pca", dims = 1:30)
OL <- FindClusters(OL, resolution = 0.5)
p1 <- DimPlot(object = OL, reduction = "umap", group.by = "condition")
p2 <- DimPlot(object = OL, reduction = "umap", label = TRUE)
plot_grid(p1, p2)
DimPlot(object = OL, reduction = "umap", split.by = "condition")

#Find marker genes.
OL_markers <- FindAllMarkers(object = OL, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
top_OL_markers <- OL_markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_logFC)
top_OL_markers[,]

#Rename cluster identities and re-visualize.
OL <- RenameIdents(object = OL, `0` = )
Idents(object = OL) <- factor(x = Idents(object = OL), levels = c())
DimPlot(object = OL, reduction = "umap", split.by = "condition", label = TRUE)

#Add meta-data.
OL$celltype.condition <- paste(Idents(object = OL), OL$condition, sep = "_")
OL$celltype <- Idents(object = OL)
Idents(object = OL) <- "celltype.condition"

#Quantify cell counts by condition per cell type.
table(OL@meta.data$celltype.condition)

#Perform differential gene expression analysis by cell type and add comparison meta-data.
#OL1 Sub-Cluster.
OL1_CTE.OL1_control <- FindMarkers(object = OL, ident.1 = "OL1_CTE", ident.2 = "OL1_control", verbose = FALSE)
OL1_CTE.OL1_control <- OL1_CTE.OL1_control[((OL1_CTE.OL1_control$avg_logFC >= 1) | (OL1_CTE.OL1_control$avg_logFC <= -1)) & (OL1_CTE.OL1_control$p_val_adj <= 0.05),]
OL1_CTE.OL1_control$gene_name <- rownames(OL1_CTE.OL1_control)
OL1_CTE.OL1_control <- cbind(OL1_CTE.OL1_control, pct.1.name = rep(NA, length(rownames(OL1_CTE.OL1_control))), pct.2.name = rep(NA, length(rownames(OL1_CTE.OL1_control))), comparison = rep(NA, length(rownames(OL1_CTE.OL1_control))))
OL1_CTE.OL1_control$pct.1.name <- "OL1_CTE"
OL1_CTE.OL1_control$pct.2.name <- "OL1_control"
OL1_CTE.OL1_control$comparison <- "between_conditions"
OL1_CTE.OL1_control

#Get all differentially expressed genes.
OL_diff_genes <- rbind(OL1_CTE.OL1_control)
rownames(OL_diff_genes) <- OL_diff_genes$gene_name
OL_diff_genes$subset <- "OL"
write.csv(OL_diff_genes, file = "2019-08-XX_CTEOLGenes_JEDC")


#---------- Astrocytes ----------


#Subset astrocytes.
astro <- SubsetData(object = CTE.combined, ident.use = c("Astro1_CTE", "Astro1_control"), do.clean = TRUE, do.scale = TRUE)

#Perform basic analyses and visualization.
astro <- FindVariableFeatures(object = astro, selection.method = "vst", nfeatures = 2000)
astro <- ScaleData(object = astro, verbose = FALSE)
astro <- RunPCA(object = astro, npcs = 30, verbose = FALSE)
astro <- RunUMAP(object = astro, reduction = "pca", dims = 1:30)
astro <- FindNeighbors(object = astro, reduction = "pca", dims = 1:30)
astro <- FindClusters(astro, resolution = 0.5)
p1 <- DimPlot(object = astro, reduction = "umap", group.by = "condition")
p2 <- DimPlot(object = astro, reduction = "umap", label = TRUE)
plot_grid(p1, p2)
DimPlot(object = astro, reduction = "umap", split.by = "condition")

#Find marker genes.
astro_markers <- FindAllMarkers(object = astro, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
top_astro_markers <- astro_markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_logFC)
top_astro_markers[,]

#Rename cluster identities and re-visualize.
astro <- RenameIdents(object = astro, `0` = )
Idents(object = astro) <- factor(x = Idents(object = astro), levels = c())
DimPlot(object = astro, reduction = "umap", split.by = "condition", label = TRUE)

#Add meta-data.
astro$celltype.condition <- paste(Idents(object = astro), astro$condition, sep = "_")
astro$celltype <- Idents(object = astro)
Idents(object = astro) <- "celltype.condition"

#Quantify cell counts by condition per cell type.
table(astro@meta.data$celltype.condition)

#Perform differential gene expression analysis by cell type and add comparison meta-data.
#Astro1 Sub-Cluster.
astro1_CTE.astro1_control <- FindMarkers(object = astro, ident.1 = "Astro1_CTE", ident.2 = "Astro1_control", verbose = FALSE)
astro1_CTE.astro1_control <- astro1_CTE.astro1_control[((astro1_CTE.astro1_control$avg_logFC >= 1) | (astro1_CTE.astro1_control$avg_logFC <= -1)) & (astro1_CTE.astro1_control$p_val_adj <= 0.05),]
astro1_CTE.astro1_control$gene_name <- rownames(astro1_CTE.astro1_control)
astro1_CTE.astro1_control <- cbind(astro1_CTE.astro1_control, pct.1.name = rep(NA, length(rownames(astro1_CTE.astro1_control))), pct.2.name = rep(NA, length(rownames(astro1_CTE.astro1_control))), comparison = rep(NA, length(rownames(astro1_CTE.astro1_control))))
astro1_CTE.astro1_control$pct.1.name <- "astro1_CTE"
astro1_CTE.astro1_control$pct.2.name <- "astro1_control"
astro1_CTE.astro1_control$comparison <- "between_conditions"
astro1_CTE.astro1_control

#Get all differentially expressed genes.
astro_diff_genes <- rbind(astro1_CTE.astro1_control)
rownames(astro_diff_genes) <- astro_diff_genes$gene_name
astro_diff_genes$subset <- "astro"
write.csv(astro_diff_genes, file = "2019-08-XX_CTEAstroGenes_JEDC")


#---------- Neurons ----------


#Subset neurons.
neuron <- SubsetData(object = CTE.combined, ident.use = c("Neuron1_CTE", "Neuron1_control"), do.clean = TRUE, do.scale = TRUE)

#Perform basic analysis and visualization.
neuron <- FindVariableFeatures(object = neuron, selection.method = "vst", nfeatures = 2000)
neuron <- ScaleData(object = neuron, verbose = FALSE)
neuron <- RunPCA(object = neuron, npcs = 30, verbose = FALSE)
neuron <- RunUMAP(object = neuron, reduction = "pca", dims = 1:30)
neuron <- FindNeighbors(object = neuron, reduction = "pca", dims = 1:30)
neuron <- FindClusters(neuron, resolution = 0.5)
p1 <- DimPlot(object = neuron, reduction = "umap", group.by = "condition")
p2 <- DimPlot(object = neuron, reduction = "umap", label = TRUE)
plot_grid(p1, p2)
DimPlot(object = neuron, reduction = "umap", split.by = "condition")

#Find marker genes.
neuron_markers <- FindAllMarkers(object = neuron, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
top_neuron_markers <- neuron_markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_logFC)
top_neuron_markers[,]

#Rename cluster identities and re-visualize.
neuron <- RenameIdents(object = neuron, `0` = )
Idents(object = neuron) <- factor(x = Idents(object = neuron), levels = c())
DimPlot(object = neuron, reduction = "umap", split.by = "condition", label = TRUE)

#Add meta-data.
neuron$celltype.condition <- paste(Idents(object = neuron), neuron$condition, sep = "_")
neuron$celltype <- Idents(object = neuron)
Idents(object = neuron) <- "celltype.condition"

#Quantify cell counts by condition per cell type.
table(neuron@meta.data$celltype.condition)

#Perform differential gene expression analysis by cell type and add comparison meta-data.
#Neuron1 Sub-Cluster.
neuron1_CTE.neuron1_control <- FindMarkers(object = neuron, ident.1 = "Neuron1_CTE", ident.2 = "Neuron1_control", verbose = FALSE)
neuron1_CTE.neuron1_control <- neuron1_CTE.neuron1_control[((neuron1_CTE.neuron1_control$avg_logFC >= 1) | (neuron1_CTE.neuron1_control$avg_logFC <= -1)) & (neuron1_CTE.neuron1_control$p_val_adj <= 0.05),]
neuron1_CTE.neuron1_control$gene_name <- rownames(neuron1_CTE.neuron1_control)
neuron1_CTE.neuron1_control <- cbind(neuron1_CTE.neuron1_control, pct.1.name = rep(NA, length(rownames(neuron1_CTE.neuron1_control))), pct.2.name = rep(NA, length(rownames(neuron1_CTE.neuron1_control))), comparison = rep(NA, length(rownames(neuron1_CTE.neuron1_control))))
neuron1_CTE.neuron1_control$pct.1.name <- "neuron1_CTE"
neuron1_CTE.neuron1_control$pct.2.name <- "neuron1_control"
neuron1_CTE.neuron1_control$comparison <- "between_conditions"
neuron1_CTE.neuron1_control

#Get all differentially expressed genes.
neuron_diff_genes <- rbind(neuron1_CTE.neuron1_control)
rownames(neuron_diff_genes) <- neuron_diff_genes$gene_name
neuron_diff_genes$subset <- "neuron"
write.csv(neuron_diff_genes, file = "2019-08-XX_CTENeuronGenes_JEDC")


#---------- Endothelial Cells ----------


#Subset endothelial cells.
endo <- SubsetData(object = CTE.combined, ident.use = c("Endo1_CTE", "Endo1_control"), do.clean = TRUE, do.scale = TRUE)

#Perform basic analysis and visualization.
endo <- FindVariableFeatures(object = endo, selection.method = "vst", nfeatures = 2000)
endo <- ScaleData(object = endo, verbose = FALSE)
endo <- RunPCA(object = endo, npcs = 30, verbose = FALSE)
endo <- RunUMAP(object = endo, reduction = "pca", dims = 1:30)
endo <- FindNeighbors(object = endo, reduction = "pca", dims = 1:30)
endo <- FindClusters(endo, resolution = 0.5)
p1 <- DimPlot(object = endo, reduction = "umap", group.by = "condition")
p2 <- DimPlot(object = endo, reduction = "umap", label = TRUE)
plot_grid(p1, p2)
DimPlot(object = endo, reduction = "umap", split.by = "condition")

#Find marker genes.
endo_markers <- FindAllMarkers(object = endo, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
top_endo_markers <- endo_markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_logFC)
top_endo_markers[,]

#Rename cluster identities and re-visualize.
endo <- RenameIdents(object = endo, `0` = )
Idents(object = endo) <- factor(x = Idents(object = endo), levels = c())
DimPlot(object = endo, reduction = "umap", split.by = "condition", label = TRUE)

#Add meta-data.
endo$celltype.condition <- paste(Idents(object = endo), endo$condition, sep = "_")
endo$celltype <- Idents(object = endo)
Idents(object = endo) <- "celltype.condition"

#Quantify cell counts by condition per cell type.
table(endo@meta.data$celltype.condition)

#Perform differential gene expression analysis by cell type and add comparison meta-data.
#Endo1 Sub-Cluster.
endo1_CTE.endo1_control <- FindMarkers(object = endo, ident.1 = "Endo1_CTE", ident.2 = "Endo1_control", verbose = FALSE)
endo1_CTE.endo1_control <- endo1_CTE.endo1_control[((endo1_CTE.endo1_control$avg_logFC >= 1) | (endo1_CTE.endo1_control$avg_logFC <= -1)) & (endo1_CTE.endo1_control$p_val_adj <= 0.05),]
endo1_CTE.endo1_control$gene_name <- rownames(endo1_CTE.endo1_control)
endo1_CTE.endo1_control <- cbind(endo1_CTE.endo1_control, pct.1.name = rep(NA, length(rownames(endo1_CTE.endo1_control))), pct.2.name = rep(NA, length(rownames(endo1_CTE.endo1_control))), comparison = rep(NA, length(rownames(endo1_CTE.endo1_control))))
endo1_CTE.endo1_control$pct.1.name <- "endo1_CTE"
endo1_CTE.endo1_control$pct.2.name <- "endo1_control"
endo1_CTE.endo1_control$comparison <- "between_conditions"
endo1_CTE.endo1_control

#Get all differentially expressed genes.
endo_diff_genes <- rbind(endo1_CTE.endo1_control)
rownames(endo_diff_genes) <- endo_diff_genes$gene_name
endo_diff_genes$subset <- "endo"
write.csv(endo_diff_genes, file = "2019-08-XX_CTEEndoGenes_JEDC")


#---------- Microglia ----------


#Subset microglia.
MG <- SubsetData(object = CTE.combined, ident.use = c("MG1_CTE", "MG1_control"), do.clean = TRUE, do.scale = TRUE)

#Perform basic analysis and visualization.
MG <- FindVariableFeatures(object = MG, selection.method = "vst", nfeatures = 2000)
MG <- ScaleData(object = MG, verbose = FALSE)
MG <- RunPCA(object = MG, npcs = 30, verbose = FALSE)
MG <- RunUMAP(object = MG, reduction = "pca", dims = 1:30)
MG <- FindNeighbors(object = MG, reduction = "pca", dims = 1:30)
MG <- FindClusters(MG, resolution = 0.5)
p1 <- DimPlot(object = MG, reduction = "umap", group.by = "condition")
p2 <- DimPlot(object = MG, reduction = "umap", label = TRUE)
plot_grid(p1, p2)
DimPlot(object = MG, reduction = "umap", split.by = "condition")

#Find marker genes.
MG_markers <- FindAllMarkers(object = MG, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
top_MG_markers <- MG_markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_logFC)
top_MG_markers[,]

#Rename cluster identities and re-visualize.
MG <- RenameIdents(object = MG, `0` = )
Idents(object = MG) <- factor(x = Idents(object = MG), levels = c())
DimPlot(object = MG, reduction = "umap", split.by = "condition", label = TRUE)

#Add meta-data.
MG$celltype.condition <- paste(Idents(object = MG), MG$condition, sep = "_")
MG$celltype <- Idents(object = MG)
Idents(object = MG) <- "celltype.condition"

#Quantify cell counts by condition per cell type.
table(MG@meta.data$celltype.condition)

#Perform differential gene expression analysis by cell type and add comparison meta-data.
#MG1 Sub-Cluster.
MG1_CTE.MG1_control <- FindMarkers(object = MG, ident.1 = "MG1_CTE", ident.2 = "MG1_control", verbose = FALSE)
MG1_CTE.MG1_control <- MG1_CTE.MG1_control[((MG1_CTE.MG1_control$avg_logFC >= 1) | (MG1_CTE.MG1_control$avg_logFC <= -1)) & (MG1_CTE.MG1_control$p_val_adj <= 0.05),]
MG1_CTE.MG1_control$gene_name <- rownames(MG1_CTE.MG1_control)
MG1_CTE.MG1_control <- cbind(MG1_CTE.MG1_control, pct.1.name = rep(NA, length(rownames(MG1_CTE.MG1_control))), pct.2.name = rep(NA, length(rownames(MG1_CTE.MG1_control))), comparison = rep(NA, length(rownames(MG1_CTE.MG1_control))))
MG1_CTE.MG1_control$pct.1.name <- "MG1_CTE"
MG1_CTE.MG1_control$pct.2.name <- "MG1_control"
MG1_CTE.MG1_control$comparison <- "between_conditions"
MG1_CTE.MG1_control

#Get all differentially expressed genes.
MG_diff_genes <- rbind(MG1_CTE.MG1_control)
rownames(MG_diff_genes) <- MG_diff_genes$gene_name
MG_diff_genes$subset <- "MG"
write.csv(MG_diff_genes, file = "2019-08-XX_CTEMGGenes_JEDC")


#---------- Pericytes ----------


#Subset pericytes.
peri <- SubsetData(object = CTE.combined, ident.use = c("Peri1_CTE", "Peri1_control"), do.clean = TRUE, do.scale = TRUE)

#Perform basic analysis and visualization.
peri <- FindVariableFeatures(object = peri, selection.method = "vst", nfeatures = 2000)
peri <- ScaleData(object = peri, verbose = FALSE)
peri <- RunPCA(object = peri, npcs = 30, verbose = FALSE)
peri <- RunUMAP(object = peri, reduction = "pca", dims = 1:30)
peri <- FindNeighbors(object = peri, reduction = "pca", dims = 1:30)
peri <- FindClusters(peri, resolution = 0.5)
p1 <- DimPlot(object = peri, reduction = "umap", group.by = "condition")
p2 <- DimPlot(object = peri, reduction = "umap", label = TRUE)
plot_grid(p1, p2)
DimPlot(object = peri, reduction = "umap", split.by = "condition")

#Find marker genes.
peri_markers <- FindAllMarkers(object = peri, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
top_peri_markers <- peri_markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_logFC)
top_peri_markers[,]

#Rename cluster identities and re-visualize.
peri <- RenameIdents(object = peri, `0` = )
Idents(object = peri) <- factor(x = Idents(object = peri), levels = c())
DimPlot(object = peri, reduction = "umap", split.by = "condition", label = TRUE)

#Add meta-data.
peri$celltype.condition <- paste(Idents(object = peri), peri$condition, sep = "_")
peri$celltype <- Idents(object = peri)
Idents(object = peri) <- "celltype.condition"

#Quantify cell counts by condition per cell type.
table(peri@meta.data$celltype.condition)

#Perform differential gene expression analysis by cell type and add comparison meta-data.
#peri1 Sub-Cluster.
peri1_CTE.peri1_control <- FindMarkers(object = peri, ident.1 = "Peri1_CTE", ident.2 = "Peri1_control", verbose = FALSE)
peri1_CTE.peri1_control <- peri1_CTE.peri1_control[((peri1_CTE.peri1_control$avg_logFC >= 1) | (peri1_CTE.peri1_control$avg_logFC <= -1)) & (peri1_CTE.peri1_control$p_val_adj <= 0.05),]
peri1_CTE.peri1_control$gene_name <- rownames(peri1_CTE.peri1_control)
peri1_CTE.peri1_control <- cbind(peri1_CTE.peri1_control, pct.1.name = rep(NA, length(rownames(peri1_CTE.peri1_control))), pct.2.name = rep(NA, length(rownames(peri1_CTE.peri1_control))), comparison = rep(NA, length(rownames(peri1_CTE.peri1_control))))
peri1_CTE.peri1_control$pct.1.name <- "peri1_CTE"
peri1_CTE.peri1_control$pct.2.name <- "peri1_control"
peri1_CTE.peri1_control$comparison <- "between_conditions"
peri1_CTE.peri1_control

#Get all differentially expressed genes.
peri_diff_genes <- rbind(peri1_CTE.peri1_control)
rownames(peri_diff_genes) <- peri_diff_genes$gene_name
peri_diff_genes$subset <- "peri"
write.csv(peri_diff_genes, file = "2019-08-XX_CTEPeriGenes_JEDC")


#---------- Final ----------


#Get all differentially expressed genes.
all_diff_genes <- rbind(int_diff_genes, OPC_diff_genes, OL_diff_genes, astro_diff_genes, neuron_diff_genes)
rownames(all_diff_genes) <- all_diff_genes$gene_name
write.csv(all_diff_genes, file = "2019-08-XX_CTEAllGenes_JEDC")


#---------- Extras ----------


#Single gene dot plot.
markers.to.plot <- c("_____")
DotPlot(object = CTE.combined, features = rev(x = markers.to.plot), col = c("blue", "red"), dot.scale = 8, split.by = "condition") + RotatedAxis()

#Differential expression test code block.
@^A^_^C^.@^B^_^D^ <- FindMarkers(object = @, ident.^A^ = "@^A^_^C^", ident.2 = "@^A^_^D^", verbose = FALSE)
@^A^_^C^.@^B^_^D^ <- @^A^_^C^.@^A^_^D^[((@^A^_^C^.@^A^_^D^$avg_logFC >= ^A^) | (@^A^_^C^.@^A^_^D^$avg_logFC <= -^A^)) & (@^A^_^C^.@^A^_^D^$p_val_adj <= 0.05),]
@^A^_^C^.@^B^_^D^$gene_name <- rownames(@^A^_^C^.@^A^_^D^)
@^A^_^C^.@^B^_^D^ <- cbind(@^A^_^C^.@^A^_^D^, pct.1.name = rep(NA, length(rownames(@^A^_^C^.@^A^_^D^))), pct.2.name = rep(NA, length(rownames(@^A^_^C^.@^A^_^D^))), comparison = rep(NA, length(rownames(@^A^_^C^.@^A^_^D^))))
@^A^_^C^.@^B^_^D^$pct.1.name <- "@^A^_^C^"
@^A^_^C^.@^B^_^D^$pct.2.name <- "@^B^_^D^"
@^A^_^C^.@^B^_^D^$comparison <- "*_conditions"
@^A^_^C^.@^B^_^D^

#This script assumes a Seurat analysis has been done.
#If not, initial data must be loaded according to monocle vignette.

#View monocle vignette.
browseVignettes("monocle")


#---------- Initiation ----------


#Load packages
library(dplyr)
library(monocle)
library(plyr)
library(reshape2)

#Extract count data, phenotype data, and feature data from the Seurat Object.
counts.data <- as(as.matrix(CTE.combined@assays$RNA@data), 'sparseMatrix')
pheno.data <- new('AnnotatedDataFrame', data = CTE.combined@meta.data)
feature.data <- data.frame(gene_short_name = row.names(counts.data), row.names = row.names(counts.data))
feature.data <- new('AnnotatedDataFrame', data = feature.data)

#Construct cell data set.
cds <- newCellDataSet(counts.data, phenoData = pheno.data, featureData = feature.data, lowerDetectionLimit = 0.5, expressionFamily = negbinomial.size())

#Estimate size factors and dispersions.
cds <- estimateSizeFactors(cds)
cds <-  estimateDispersions(cds)

#Filtering low quality cells.
cds <- detectGenes(cds, min_expr = 0.1)
expressed_genes <- row.names(fData(cds))
pData(cds)$total_mRNAs <- Matrix::colSums(exprs(cds))
cds <- cds[,pData(cds)$total_mRNAs < 1e6]
upper_bound <- 10^(mean(log10(pData(cds)$total_mRNAs)) + 2*sd(log10(pData(cds)$total_mRNAs)))
lower_bound <- 10^(mean(log10(pData(cds)$total_mRNAs)) - 2*sd(log10(pData(cds)$total_mRNAs)))
cds <- cds[,pData(cds)$total_mRNAs > lower_bound & pData(cds)$total_mRNAs < upper_bound]
cds <- detectGenes(cds, min_expr = 0.1)


#---------- Clustering ----------


#Set marker genes.
#OPC markers.
PDGFRA_id <- row.names(subset(fData(cds), gene_short_name == "PDGFRA"))
VCAN_id <- row.names(subset(fData(cds), gene_short_name == "VCAN"))
#OL markers.
CLDN11_id <- row.names(subset(fData(cds), gene_short_name == "CLDN11"))
MBP_id <- row.names(subset(fData(cds), gene_short_name == "MBP"))
MOG_id <- row.names(subset(fData(cds), gene_short_name == "MOG"))
OPALIN_id <- row.names(subset(fData(cds), gene_short_name == "OPALIN"))
PLP1_id <- row.names(subset(fData(cds), gene_short_name == "PLP1"))
#Astrocyte markers.
ALDH1L1_id <- row.names(subset(fData(cds), gene_short_name == "ALDH1L1"))
ALDOC_id <- row.names(subset(fData(cds), gene_short_name == "ALDOC"))
AQP4_id <- row.names(subset(fData(cds), gene_short_name == "AQP4"))
GFAP_id <- row.names(subset(fData(cds), gene_short_name == "GFAP"))
GJA1_id <- row.names(subset(fData(cds), gene_short_name == "GJA1"))
SLC1A2_id <- row.names(subset(fData(cds), gene_short_name == "SLC1A2"))
SLC1A3_id <- row.names(subset(fData(cds), gene_short_name == "SLC1A3"))
SLC6A11_id <- row.names(subset(fData(cds), gene_short_name == "SLC6A11"))
#Neuron markers.
ADCYAP1_id <- row.names(subset(fData(cds), gene_short_name == "ADCYAP1"))
COCH_id <- row.names(subset(fData(cds), gene_short_name == "COCH"))
CRH_id <- row.names(subset(fData(cds), gene_short_name == "CRH"))
GAD1_id <- row.names(subset(fData(cds), gene_short_name == "GAD1"))
GAD2_id <- row.names(subset(fData(cds), gene_short_name == "GAD2"))
GRIN1_id <- row.names(subset(fData(cds), gene_short_name == "GRIN1"))
GRIN2A_id <- row.names(subset(fData(cds), gene_short_name == "GRIN2A"))
GRIN2B_id <- row.names(subset(fData(cds), gene_short_name == "GRIN2B"))
KCNJ3_id <- row.names(subset(fData(cds), gene_short_name == "KCNJ3"))
KCNJ4_id <- row.names(subset(fData(cds), gene_short_name == "KCNJ4"))
KCNJ9_id <- row.names(subset(fData(cds), gene_short_name == "KCNJ9"))
MEG3_id <- row.names(subset(fData(cds), gene_short_name == "MEG3"))
NEFM_id <- row.names(subset(fData(cds), gene_short_name == "NEFM"))
NRGN_id <- row.names(subset(fData(cds), gene_short_name == "NRGN"))
RBFOX3_id <- row.names(subset(fData(cds), gene_short_name == "RBFOX3"))
SLC6A7_id <- row.names(subset(fData(cds), gene_short_name == "SLC6A7"))
SLC17A6_id <- row.names(subset(fData(cds), gene_short_name == "SLC17A6"))
SLC17A7_id <- row.names(subset(fData(cds), gene_short_name == "SLC17A7"))
SYP_id <- row.names(subset(fData(cds), gene_short_name == "SYP"))
#Microglia markers.
ADGRE1_id <- row.names(subset(fData(cds), gene_short_name == "ADGRE1"))
AIF1_id <- row.names(subset(fData(cds), gene_short_name == "AIF1"))
CD68_id <- row.names(subset(fData(cds), gene_short_name == "CD68"))
CD74_id <- row.names(subset(fData(cds), gene_short_name == "CD74"))
CSF1R_id <- row.names(subset(fData(cds), gene_short_name == "CSF1R"))
CX3CR1_id <- row.names(subset(fData(cds), gene_short_name == "CX3CR1"))
LPL_id <- row.names(subset(fData(cds), gene_short_name == "LPL"))
PTPRC_id <- row.names(subset(fData(cds), gene_short_name == "PTPRC"))
TMEM119_id <- row.names(subset(fData(cds), gene_short_name == "TMEM119"))
#Endothelial cell markers.
CD34_id <- row.names(subset(fData(cds), gene_short_name == "CD34"))
CDH5_id <- row.names(subset(fData(cds), gene_short_name == "CDH5"))
FLT1_id <- row.names(subset(fData(cds), gene_short_name == "FLT1"))
KDR_id <- row.names(subset(fData(cds), gene_short_name == "KDR"))
PECAM1_id <- row.names(subset(fData(cds), gene_short_name == "PECAM1"))
SLC6A6_id <- row.names(subset(fData(cds), gene_short_name == "SLC6A6"))
TEK_id <- row.names(subset(fData(cds), gene_short_name == "TEK"))
VWF_id <- row.names(subset(fData(cds), gene_short_name == "VWF"))
#Pericyte markers.
PDGFRB_id <- row.names(subset(fData(cds), gene_short_name == "PDGFRB"))

#Classify cells by cell type marker genes.
cth <- newCellTypeHierarchy()
cth <- addCellType(cth, "OPC", classify_func = function(x) { (x[PDGFRA_id,] >= 1 | x[VCAN_id,] >= 1) & (x[ADGRE1_id,] == 0 & x[AIF1_id,] == 0 & x[CD68_id,] == 0 & x[CD74_id,] == 0 & x[CSF1R_id,] == 0 & x[CX3CR1_id,] == 0 & x[LPL_id,] == 0 & x[PTPRC_id,] == 0 & x[TMEM119_id,] == 0 & x[CD34_id,] == 0 & x[CDH5_id,] == 0 & x[FLT1_id,] == 0 & x[KDR_id,] == 0 & x[PECAM1_id,] == 0 & x[SLC6A6_id,] == 0 & x[TEK_id,] == 0 & x[VWF_id,] == 0) })
cth <- addCellType(cth, "OL", classify_func = function(x) { (x[CLDN11_id,] >= 1 | x[MBP_id,] >= 1 | x[MOG_id,] >= 1 | x[OPALIN_id,] >= 1 | x[PLP1_id,] >= 1) & (x[ADGRE1_id,] == 0 & x[AIF1_id,] == 0 & x[CD68_id,] == 0 & x[CD74_id,] == 0 & x[CSF1R_id,] == 0 & x[CX3CR1_id,] == 0 & x[LPL_id,] == 0 & x[PTPRC_id,] == 0 & x[TMEM119_id,] == 0 & x[CD34_id,] == 0 & x[CDH5_id,] == 0 & x[FLT1_id,] == 0 & x[KDR_id,] == 0 & x[PECAM1_id,] == 0 & x[SLC6A6_id,] == 0 & x[TEK_id,] == 0 & x[VWF_id,] == 0) })
cth <- addCellType(cth, "Astro", classify_func = function(x) { (x[ALDH1L1_id,] >= 1 | x[ALDOC_id,] >= 1 | x[AQP4_id,] >= 1 | x[GFAP_id,] >= 1 | x[GJA1_id,] >= 1 | x[SLC1A2_id,] >= 1 | x[SLC1A3_id,] >= 1 | x[SLC6A11_id,] >= 1) & (x[ADGRE1_id,] == 0 & x[AIF1_id,] == 0 & x[CD68_id,] == 0 & x[CD74_id,] == 0 & x[CSF1R_id,] == 0 & x[CX3CR1_id,] == 0 & x[LPL_id,] == 0 & x[PTPRC_id,] == 0 & x[TMEM119_id,] == 0 & x[CD34_id,] == 0 & x[CDH5_id,] == 0 & x[FLT1_id,] == 0 & x[KDR_id,] == 0 & x[PECAM1_id,] == 0 & x[SLC6A6_id,] == 0 & x[TEK_id,] == 0 & x[VWF_id,] == 0) })
cth <- addCellType(cth, "Neuron", classify_func = function(x) { (x[ADCYAP1_id,] >= 1 | x[COCH_id,] >= 1 | x[CRH_id,] >= 1 | x[GAD1_id,] >= 1 | x[GAD2_id,] >= 1 | x[GRIN1_id,] >= 1 | x[GRIN2A_id,] >= 1 | x[GRIN2B_id,] >= 1 | x[KCNJ3_id,] >= 1 | x[KCNJ4_id,] >= 1 | x[KCNJ9_id,] >= 1 | x[MEG3_id,] >= 1 | x[NEFM_id,] >= 1 | x[NRGN_id,] >= 1 | x[RBFOX3_id,] >= 1 | x[SLC6A7_id,] >= 1 | x[SLC17A6_id,] >= 1 | x[SLC17A7_id,] >= 1 | x[SYP_id,] >= 1) & (x[ADGRE1_id,] == 0 & x[AIF1_id,] == 0 & x[CD68_id,] == 0 & x[CD74_id,] == 0 & x[CSF1R_id,] == 0 & x[CX3CR1_id,] == 0 & x[LPL_id,] == 0 & x[PTPRC_id,] == 0 & x[TMEM119_id,] == 0 & x[CD34_id,] == 0 & x[CDH5_id,] == 0 & x[FLT1_id,] == 0 & x[KDR_id,] == 0 & x[PECAM1_id,] == 0 & x[SLC6A6_id,] == 0 & x[TEK_id,] == 0 & x[VWF_id,] == 0) })
cth <- addCellType(cth, "MG", classify_func = function(x) { (x[ADGRE1_id,] >= 1 | x[AIF1_id,] >= 1 | x[CD68_id,] >= 1 | x[CD74_id,] >= 1 | x[CSF1R_id,] >= 1 | x[CX3CR1_id,] >= 1 | x[LPL_id,] >= 1 | x[PTPRC_id,] >= 1 | x[TMEM119_id,] >= 1) })
cth <- addCellType(cth, "Endo", classify_func = function(x) { (x[CD34_id,] >= 1 | x[CDH5_id,] >= 1 | x[FLT1_id,] >= 1 | x[KDR_id,] >= 1 | x[PECAM1_id,] >= 1 | x[SLC6A6_id,] >= 1 | x[TEK_id,] >= 1 | x[VWF_id,] >= 1) })
cds <- classifyCells(cds, cth, frequency_thresh =  0.1)
table(pData(cds)$CellType)


#---------- OL Linneage Cells ----------


#Subset OL linneage cells.
cds_OLL <- cds[,pData(cds)$CellType == "OPC" | pData(cds)$CellType == "OL"]

#Set ordering genes.
ordering_genes <- row.names(subset(fData(cds), gene_short_name == "____" | 
                                               gene_short_name == "____" |
                                               gene_short_name == "____" |
                                               gene_short_name == "____" |
                                               gene_short_name == "____" |
                                               gene_short_name == "____" |
                                               gene_short_name == "____" |
                                               gene_short_name == "____" |
                                               gene_short_name == "____" |
                                               gene_short_name == "____"))
cds_OLL <- setOrderingFilter(cds_OLL, ordering_genes)

#Reduce data dimensionality.
cds_OLL <- reduceDimension(cds_OLL, max_components = 2, method = 'DDRTree')

#Order cells along a trajectory and visualize.
cds_OLL <- orderCells(cds_OLL)
plot_cell_trajectory(cds_OLL, show_backbone = TRUE, show_branch_points = TRUE, color_by = "State")
plot_cell_trajectory(cds_OLL, show_backbone = TRUE, show_branch_points = TRUE, color_by = "CellType")
plot_cell_trajectory(cds_OLL, show_backbone = TRUE, show_branch_points = TRUE, color_by = "condition")
plot_cell_trajectory(cds_OLL, color_by = "State") + facet_wrap(~State, nrow = 1)
plot_cell_trajectory(cds_OLL, color_by = "CellType") + facet_wrap(~CellType, nrow = 1)
plot_cell_trajectory(cds_OLL, color_by = "condition") + facet_wrap(~condition, nrow = 1)

#Quantify cells per state by condition.
table((pData(cds_OLL)[,"condition"]),(pData(cds_OLL)[,"State"]))
